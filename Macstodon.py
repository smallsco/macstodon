"""Macstodon - a Mastodon client for classic Mac OSMIT LicenseCopyright (c) 2022 Scott Small and ContributorsPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associateddocumentation files (the "Software"), to deal in the Software without restriction, including without limitation therights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permitpersons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of theSoftware.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THEWARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS ORCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OROTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."""## macfreeze: path Software:Programming:Python 1.5.2c1:Mac:Tools:IDE# macfreeze: exclude msvcrt# macfreeze: exclude SOCKS# macfreeze: exclude TERMIOS# macfreeze: exclude termios## ######## Imports # #######import AE, AppleEventsimport EasyDialogsimport FrameWorkimport MacOSimport icimport jsonimport Scrapimport stringimport timeimport urllibimport W, Wapplication# ########## Constants# #########DEBUG = 0VERSION = "0.2.1"# ################### Debug Print Helper# ##################def dprint(text):    """    Prints a string to stdout if and only if DEBUG is true    """    if DEBUG:        print text# ######## Classes# #######class TokenURLopener(urllib.FancyURLopener):    """    Extends urllib.FancyURLopener to add the Authorization header    with a bearer token.    """    def __init__(self, token, *args):        apply(urllib.FancyURLopener.__init__, (self,) + args)        self.addheaders.append(("Authorization", "Bearer %s" % token))class Macstodon(Wapplication.Application):    """    The application itself.    """    # Creator type of this application    MyCreatorType = 'M$dN'    # Location of prefs in Preferences Folder    preffilepath = ":Macstodon Preferences"    # ########################    # Initialization Functions    # ########################    def __init__(self):        """        Run when the application launches.        """        Wapplication.Application.__init__(self, self.MyCreatorType)        # All applications should handle these Apple Events,        #  but you'll need an aete resource.        AE.AEInstallEventHandler(            # We're already open            AppleEvents.kCoreEventClass,            AppleEvents.kAEOpenApplication,             self.ignoreevent        )        AE.AEInstallEventHandler(            # No printing in this app            AppleEvents.kCoreEventClass,            AppleEvents.kAEPrintDocuments,            self.ignoreevent        )        AE.AEInstallEventHandler(            # No opening documents in this app            AppleEvents.kCoreEventClass,            AppleEvents.kAEOpenDocuments,             self.ignoreevent        )        AE.AEInstallEventHandler(            AppleEvents.kCoreEventClass,            AppleEvents.kAEQuitApplication,             self.quitevent        )        # Open login window        self.loginwindow = self.getLoginWindow()        self.loginwindow.open()        # Process some events!        self.mainloop()    def mainloop(self, mask=FrameWork.everyEvent, wait=0):        """        Modified version of Wapplication.mainloop() that removes        the debugging/traceback window.        """        self.quitting = 0        saveyield = MacOS.EnableAppswitch(-1)        try:            while not self.quitting:                try:                    self.do1event(mask, wait)                except W.AlertError, detail:                    MacOS.EnableAppswitch(-1)                    W.Message(detail)                except self.DebuggerQuit:                    MacOS.EnableAppswitch(-1)                except:                    if DEBUG:                        MacOS.EnableAppswitch(-1)                        import PyEdit                        PyEdit.tracebackwindow.traceback()                    else:                        raise        finally:            MacOS.EnableAppswitch(1)    def makeusermenus(self):        """        Set up menu items which all applications should have.        Apple Menu has already been set up.        """        # File menu        m = Wapplication.Menu(self.menubar, "File")        quititem = FrameWork.MenuItem(m, "Quit", "Q", 'quit')        # Edit menu        m = Wapplication.Menu(self.menubar, "Edit")        undoitem = FrameWork.MenuItem(m, "Undo", 'Z', "undo")        FrameWork.Separator(m)        cutitem = FrameWork.MenuItem(m, "Cut", 'X', "cut")        copyitem = FrameWork.MenuItem(m, "Copy", "C", "copy")        pasteitem = FrameWork.MenuItem(m, "Paste", "V", "paste")        clearitem = FrameWork.MenuItem(m, "Clear", None,  "clear")        FrameWork.Separator(m)        selallitem = FrameWork.MenuItem(m, "Select all", "A", "selectall")        # Any other menus would go here        # These menu items need to be updated periodically;        #   any menu item not handled by the application should be here,        #   as should any with a "can_" handler.        self._menustocheck = [            undoitem, cutitem, copyitem, pasteitem, clearitem, selallitem        ]    # no window menu, so pass    def checkopenwindowsmenu(self):        pass    # ##############################    # Apple Event Handling Functions    # ##############################    def ignoreevent(self, theAppleEvent, theReply):        """        Handler for events that we want to ignore        """        pass    def quitevent(self, theAppleEvent, theReply):        """        System is telling us to quit        """        self._quit()    # #######################    # Menu Handling Functions    # #######################    def do_about(self, id, item, window, event):        """        User selected "About" from the Apple menu        """        about_text = "Macstodon %s\r" \            "A basic Mastodon client for Classic Mac OS\r" \            "by Scott Small, @smallsco@oldbytes.space\r" \            "GitHub: https://github.com/smallsco/macstodon"        EasyDialogs.Message(about_text % VERSION)    def domenu_quit(self):        """        User selected "Quit" from the File menu        """        self._quit()    # #########################    # Window Handling Functions    # #########################    def getAuthWindow(self):        """        Creates the OAuth code window        """        authwindow = W.Dialog((220, 180), "Macstodon %s - Auth Code" % VERSION)        auth_text = "Please log in to Mastodon using your web browser, it should have " \            "been automatically launched.\r\rAfter logging in, you will be presented " \            "with a code, please copy that code and paste it below, then press OK."        authwindow.auth_label = W.TextBox((10, 8, -10, 96), auth_text)        authwindow.code = W.EditText((10, 112, -10, 30))        authwindow.logout_btn = W.Button((10, -22, 60, 16), "Logout", self.authLogoutCallback)        authwindow.ok_btn = W.Button((-69, -22, 60, 16), "OK", self.authTokenCallback)        authwindow.setdefaultbutton(authwindow.ok_btn)        return authwindow    def getLoginWindow(self):        """        Creates the login window (prompts for a server URL) and returns it        """        prefs = self.getprefs()        loginwindow = W.Dialog((220, 60), "Macstodon %s - Server" % VERSION)        loginwindow.sv_label = W.TextBox((0, 8, 110, 16), "Server URL:")        loginwindow.server = W.EditText((70, 6, -10, 16), prefs.server or "")        loginwindow.login_btn = W.Button((10, -22, 60, 16), "Login", self.loginCallback)        loginwindow.quit_btn = W.Button((-69, -22, 60, 16), "Quit", self._quit)        loginwindow.setdefaultbutton(loginwindow.login_btn)        return loginwindow    def getTootWindow(self):        tootwindow = W.Dialog((220, 100), "Macstodon %s - Toot" % VERSION)        tootwindow.toot = W.EditText((10, 6, -10, 50))        tootwindow.logout_btn = W.Button((10, -22, 60, 16), "Logout", self.tootLogoutCallback)        tootwindow.toot_btn = W.Button((-69, -22, 60, 16), "Toot!", self.tootCallback)        tootwindow.setdefaultbutton(tootwindow.toot_btn)        return tootwindow    # ##################    # Callback Functions    # ##################    def authLogoutCallback(self):        """        Run when the user clicks the "Logout" button from the auth window.        Just closes the auth window and reopens the login window.        """        self.authwindow.close()        self.loginwindow = self.getLoginWindow()        self.loginwindow.open()    def authTokenCallback(self):        """        Run when the user clicks the "OK" button from the auth window.        Uses the user's auth code to make a request for a token.        """        authcode = self.authwindow.code.get()        # Raise an error if authcode is blank        if string.strip(authcode) == "":            EasyDialogs.Message("Please enter the code that was shown in your web browser after you logged in.")            return        self.authwindow.close()        prefs = self.getprefs()        req_data = {            "client_id": prefs.client_id,            "client_secret": prefs.client_secret,            "redirect_uri": "urn:ietf:wg:oauth:2.0:oob",            "grant_type": "authorization_code",            "code": authcode,            "scope": "read write follow"        }        path = "/oauth/token"        data = self.handleRequest(path, req_data)        if not data:            # handleRequest failed (and should have popped an error dialog already)            self.loginwindow = self.getLoginWindow()            self.loginwindow.open()            return        token = data.get('access_token')        if token:            prefs.token = token            prefs.save()            dprint("token: %s" % prefs.token)            self.tootwindow = self.getTootWindow()            self.tootwindow.open()        else:            # we got a JSON response but it didn't have the auth token            dprint("ACK! Token is missing from the response :(")            dprint("This is what came back from the server:")            dprint(data)            EasyDialogs.Message("Server error when getting auth token:\r\r %s" % data['error'])            self.loginwindow = self.getLoginWindow()            self.loginwindow.open()            return    def loginCallback(self):        """        Run when the user clicks the "Login" button from the login window.        """        # Raise an error if URL is blank        if string.strip(self.loginwindow.server.get()) == "":            EasyDialogs.Message("Please enter the URL to your Mastodon server, using HTTP instead of HTTPS. This value cannot be blank.")            return        # Save server to prefs and clear tokens if it has changed        prefs = self.getprefs()        if prefs.server and (self.loginwindow.server.get() != prefs.server):            dprint("Server has changed, clearing tokens")            prefs.token = None            prefs.client_id = None            prefs.client_secret = None        prefs.server = self.loginwindow.server.get()        prefs.save()        # Close login window        self.loginwindow.close()        # If it's our first time using this server we need to        # register our app with it.        if prefs.client_id and prefs.client_secret:            dprint("Using existing app credentials for this server")        else:            dprint("First time using this server, creating new app credentials")            result = self.createAppCredentials()            if not result:                self.loginwindow = self.getLoginWindow()                self.loginwindow.open()                return        dprint("client id: %s" % prefs.client_id)        dprint("client secret: %s" % prefs.client_secret)        # Do we have a token (is the user logged in?) If not, we need to        # log the user in and generate a token        if not prefs.token:            dprint("Need to generate a user token")            self.getAuthCode()        else:            dprint("Using existing user token for this server")            dprint("token: %s" % prefs.token)            self.tootwindow = self.getTootWindow()            self.tootwindow.open()    def timelineCallback(self):        """        Some _very_ early work for pulling a timeline. Not yet used anywhere.        """        path = "/api/v1/timelines/public?local=true&limit=2"        data = self.handleRequest(path)        if not data:            return        for toot in data:            dprint(toot["account"]["acct"] + ": " + toot["content"])    def tootCallback(self):        """        Called when the user presses the Toot button, and posts their toot.        """        req_data = {            "status": self.tootwindow.toot.get()        }        path = "/api/v1/statuses"        data = self.handleRequest(path, req_data, use_token=1)        if not data:            # handleRequest failed and should have popped an error dialog            return        if data.get("error") is not None:            EasyDialogs.Message("Server error when posting toot:\r\r %s" % data['error'])        else:            EasyDialogs.Message("Tooted successfully!")    def tootLogoutCallback(self):        """        Run when the user clicks the "Logout" button from the toot window.        Just closes the toot window and reopens the login window.        """        self.tootwindow.close()        self.loginwindow = self.getLoginWindow()        self.loginwindow.open()    # #######################    # OAuth Support Functions    # #######################    def createAppCredentials(self):        """        Creates credentials on the user's Mastodon instance for this application        """        req_data = {            "client_name": "Macstodon",            "redirect_uris": "urn:ietf:wg:oauth:2.0:oob",            "scopes": "read write follow"        }        path = "/api/v1/apps"        data = self.handleRequest(path, req_data)        if not data:            # handleRequest failed and should have popped an error dialog            return 0        client_secret = data.get('client_secret')        client_id = data.get('client_id')        if client_secret and client_id:            prefs = self.getprefs()            prefs.client_id = client_id            prefs.client_secret = client_secret            prefs.save()            return 1        else:            # we got a JSON response but it didn't have the client ID or secret            dprint("ACK! Client ID and/or Client Secret are missing :(")            dprint("This is what came back from the server:")            dprint(data)            EasyDialogs.Message("Server error when creating application credentials:\r\r %s" % data['error'])            return 0    def getAuthCode(self):        """        Launches the user's web browser with the OAuth token generation URL        for their instance.        """        prefs = self.getprefs()        req_data = {            "client_id": prefs.client_id,            "redirect_uri": "urn:ietf:wg:oauth:2.0:oob",            "scope": "read write follow",            "response_type": "code"        }        url = "%s/oauth/authorize?%s" % (prefs.server, urllib.urlencode(req_data))        try:            ic.launchurl(url)        except:            # Internet Config is not installed, or, if it is installed,            # then a default web browser has not been set.            dprint("Missing Internet Config, or no default browser configured")            dprint(url)            Scrap.ZeroScrap()            Scrap.PutScrap('TEXT', url)            msg = "Unable to automatically launch your web browser because Internet Config " \                "is not installed. The OAuth URL has been copied to your clipboard instead."            EasyDialogs.Message(msg)        self.authwindow = self.getAuthWindow()        self.authwindow.open()    # ######################    # Other Helper Functions    # ######################    def handleRequest(self, path, data = None, use_token = 0):        """        HTTP request wrapper        """        try:            pb = EasyDialogs.ProgressBar(maxval=3)                    if data:                data = urllib.urlencode(data)            prefs = self.getprefs()            url = "%s%s" % (prefs.server, path)            dprint(url)            dprint(data)            dprint("connecting")            pb.label("Connecting...")            pb.inc()            try:                if use_token:                    urlopener = TokenURLopener(prefs.token)                    handle = urlopener.open(url, data)                else:                    handle = urllib.urlopen(url, data)            except IOError:                errmsg = "Unable to open a connection to: %s.\rPlease check that your SSL proxy is working properly and that the URL starts with 'http'."                EasyDialogs.Message(errmsg % url)                return None            except TypeError:                errmsg = "The provided URL is malformed: %s.\rPlease check that you have typed the URL correctly."                EasyDialogs.Message(errmsg % url)                return None            dprint("reading http headers")            dprint(handle.info())            dprint("reading http body")            pb.label("Fetching data...")            pb.inc()            try:                data = handle.read()            except IOError:                errmsg = "The connection was closed by the remote server while Macstodon was reading data.\rPlease check that your SSL proxy is working properly."                EasyDialogs.Message(errmsg)                return None            handle.close()            pb.label("Parsing data...")            pb.inc()            dprint("parsing response json")            try:                try:                    decoded = json.parse(data)                    dprint(decoded)                    return decoded                except:                    dprint("ACK! JSON Parsing failure :(")                    dprint("This is what came back from the server:")                    dprint(data)                    EasyDialogs.Message("Error parsing JSON response from the server.")                    return None            finally:                pb.label("Done.")                pb.inc()                time.sleep(0.1)                del pb        except KeyboardInterrupt:            # the user pressed cancel in the progress bar window            return None# Run the appMacstodon()