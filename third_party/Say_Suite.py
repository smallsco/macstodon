"""Suite Say: Level 1, version 1Generated from B2HD:System Folder:Extensions:Scripting Additions:SayAETE/AEUT resource version 0/144, language 0, script 0"""import aetoolsimport MacOS_code = 'SAY 'class Say:	_argmap_say = {		'using' : 'VOIC',		'display' : 'DISP',	}	def say(self, _object, _attributes={}, **_arguments):		"""say:  This is the syntax for invoking this scripting addition from AppleScriptâ„¢.		Required argument: The string to speak		Keyword argument using: The voice to speak with		Keyword argument display: The text to display in the feedback window (if different)		Keyword argument _attributes: AppleEvent attribute dictionary		"""		_code = 'aevt'		_subcode = 'SAY '		aetools.keysubst(_arguments, self._argmap_say)		_arguments['----'] = _object		_reply, _arguments, _attributes = self.send(_code, _subcode,				_arguments, _attributes)		if _arguments.has_key('errn'):			raise aetools.Error, aetools.decodeerror(_arguments)		# XXXX Optionally decode result		if _arguments.has_key('----'):			return _arguments['----']## Indices of types declared in this module#_classdeclarations = {}_propdeclarations = {}_compdeclarations = {}_enumdeclarations = {}