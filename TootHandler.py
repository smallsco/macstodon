"""Macstodon - a Mastodon client for classic Mac OSMIT LicenseCopyright (c) 2022 Scott Small and ContributorsPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associateddocumentation files (the "Software"), to deal in the Software without restriction, including without limitation therights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permitpersons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of theSoftware.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THEWARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS ORCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OROTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."""# ############### Python Imports # ##############import W# ########### My Imports# ##########from MacstodonConstants import VERSIONfrom MacstodonHelpers import dprint, handleRequest, okDialog, TitledEditText# ############ Application# ###########class TootHandler:    def __init__(self, app):        """        Initializes the TootHandler class.        """        self.app = app    # #########################    # Window Handling Functions    # #########################    def getTootWindow(self):        """        Defines the Toot window.        """        prefs = self.app.getprefs()        if not prefs.max_toot_chars:            prefs.max_toot_chars = self.getMaxTootChars()            prefs.save()                tootwindow = W.Dialog((220, 200), "Macstodon %s - Toot" % VERSION)        tootwindow.toot = TitledEditText((10, 6, -10, -40), title="Type your toot below:", vscroll=1)                tootwindow.max = W.TextBox((10, -37, -10, 16), "Maximum length: %s characters" % prefs.max_toot_chars)                tootwindow.close_btn = W.Button((10, -22, 60, 16), "Close", tootwindow.close)        # This button is intentionally not made a default, so that if you press Return        # to make a multi-line toot it won't accidentally send.        tootwindow.toot_btn = W.Button((-69, -22, 60, 16), "Toot!", self.tootCallback)        return tootwindow    # ##################    # Callback Functions    # ##################    def tootCallback(self):        """        Called when the user presses the Toot button, and posts their toot.        """        req_data = {            "status": self.app.tootwindow.toot.get()        }        path = "/api/v1/statuses"        data = handleRequest(self.app, path, req_data, use_token=1)        if not data:            # handleRequest failed and should have popped an error dialog            return        if data.get("error_description") is not None:            okDialog("Server error when posting toot:\r\r %s" % data['error_description'])        elif data.get("error") is not None:            okDialog("Server error when posting toot:\r\r %s" % data['error'])        else:            okDialog("Tooted successfully!")            self.app.tootwindow.close()    def getMaxTootChars(self):        """        Gets the maximum allowed number of characters in a toot. Not all instances support        this, the default is 500 characters if not present in the response.        """        path = "/api/v1/instance"        data = handleRequest(self.app, path)        if not data:            return 500        if data.get("error_description") is not None:            dprint("Server error when getting max toot chars: %s" % data["error_description"])            return 500        elif data.get("error") is not None:            dprint("Server error when getting max toot chars: %s" % data["error"])            return 500        else:            max_toot_chars = data.get("max_toot_chars", 500)            dprint("max toot chars: %s" % max_toot_chars)            return max_toot_chars