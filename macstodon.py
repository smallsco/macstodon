"""Macstodon - a Mastodon client for classic Mac OSMIT LicenseCopyright (c) 2020 Scott SmallPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associateddocumentation files (the "Software"), to deal in the Software without restriction, including without limitation therights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permitpersons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of theSoftware.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THEWARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS ORCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OROTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."""## macfreeze: path Software:Programming:Python 1.5.2c1:Mac:Tools:IDE# macfreeze: exclude msvcrt# macfreeze: exclude SOCKS# macfreeze: exclude TERMIOS# macfreeze: exclude termios## ######## Imports# #######import icimport MacPrefsimport jsonimport urllibimport W# ########## Constants# #########VERSION = 0.1# ######## Classes# #######class TokenURLopener(urllib.FancyURLopener):	"""	Extends urllib.FancyURLopener to add the Authorization header	with a bearer token.	"""	def __init__(self, token, *args):		apply(urllib.FancyURLopener.__init__, (self,) + args)		self.addheaders.append(("Authorization", "Bearer %s" % token))# ################### Callback Functions# ################### Login Callbackdef login():	saveprefs()	loginwindow.close()	# If it's our first time using this server we need to	# register our app with it.	if prefs.client_id and prefs.client_secret:		print "We already have credentials for this server"	else:		print "First time using server, registering app"		createApp()	print "client id: %s" % prefs.client_id	print "client secret: %s" % prefs.client_secret	if not prefs.token:		print "Need to generate a user token"		getAuthCode()	else:		print "We already have a token for this server"		print "token: %s" % prefs.token		tootwindow.open()# Logout Callbackdef logout():	tootwindow.close()	loginwindow.open()# Post Callbackdef post():	req_data = {		"status": tootwindow.toot.get()	}	path = "/api/v1/statuses"	data = handleRequest(path, req_data, use_token=1)	if not data:		return# Timeline Callback# UNUSED, but maybe in the future? :)"""def timeline():	loginwindow.close()	path = "/api/v1/timelines/public?local=true&limit=2"	data = handleRequest(path)	if not data:		return	for toot in data:		print toot["account"]["acct"] + ": " + toot["content"]"""# ######################## OAuth Support Functions# ######################## Authenticate Userdef getAuthCode():	req_data = {		"client_id": prefs.client_id,		"redirect_uri": "urn:ietf:wg:oauth:2.0:oob",		"scope": "read write follow",		"response_type": "code"	}	url = "%s/oauth/authorize?%s" % (prefs.server, urllib.urlencode(req_data))	try:		ic.launchurl(url)	except:		print "Missing Internet Config, or no default browser configured"		print url	authwindow.open()# Create Appdef createApp():	req_data = {		"client_name": "macstodon",		"redirect_uris": "urn:ietf:wg:oauth:2.0:oob",		"scopes": "read write follow"	}	path = "/api/v1/apps"	data = handleRequest(path, req_data)	if not data:		return	client_secret = data.get('client_secret')	client_id = data.get('client_id')	if client_secret and client_id:		prefs.client_id = client_id		prefs.client_secret = client_secret		prefs.save()	else:		print "ACK! Client ID and/or Client Secret are missing :("		print "This is what came back from the server:"		print data# Create Tokendef createToken():	authcode = authwindow.code.get()	authwindow.close()	req_data = {		"client_id": prefs.client_id,		"client_secret": prefs.client_secret,		"redirect_uri": "urn:ietf:wg:oauth:2.0:oob",		"grant_type": "authorization_code",		"code": authcode,		"scope": "read write follow"	}	path = "/oauth/token"	data = handleRequest(path, req_data)	if not data:		return	token = data.get('access_token')	if token:		prefs.token = token		prefs.save()		print "token: %s" % prefs.token		tootwindow.open()	else:		print "ACK! Token is missing from the response :("		print "This is what came back from the server:"		print data# ####################### Other Helper Functions# ####################### Request Handlerdef handleRequest(path, data = None, use_token = 0):	if data:		data = urllib.urlencode(data)	url = "%s%s" % (prefs.server, path)	print url	print data	print "connecting"	if use_token:		urlopener = TokenURLopener(prefs.token)		handle = urlopener.open(url, data)	else:		handle = urllib.urlopen(url, data)	print "reading http headers"	print handle.info()	print "reading http body"	data = handle.read()	handle.close()	print "parsing response json"	try:		decoded = json.parse(data)		print decoded		return decoded	except:		print "ACK! JSON Parsing failure :("		print "This is what came back from the server:"		print data# Save Preferencesdef saveprefs():	if prefs.server and (loginwindow.server.get() != prefs.server):		print "Server has changed, clearing tokens"		prefs.token = None		prefs.client_id = None		prefs.client_secret = None	prefs.server = loginwindow.server.get()	prefs.save()# ############### Main App Logic# ############### Load Preferencesprefs = MacPrefs.GetPrefs(":Macstodon Preferences")# Login Windowloginwindow = W.Dialog((220, 60), "Macstodon %s - Server" % VERSION)loginwindow.sv_label = W.TextBox((0, 8, 110, 16), "Server URL:")loginwindow.server = W.EditText((70, 6, -10, 16), prefs.server or "")loginwindow.login_btn = W.Button((10, -22, 60, 16), "Login", login)loginwindow.quit_btn = W.Button((-69, -22, 60, 16), "Quit", loginwindow.close)loginwindow.setdefaultbutton(loginwindow.login_btn)# Auth Windowauthwindow = W.Dialog((220, 180), "Macstodon %s - Auth Code" % VERSION)auth_text = "Please log in to Mastodon using your web browser, it should have " \	"been automatically launched.\r\rAfter logging in, you will be presented " \	"with a code, please copy that code and paste it below, then press OK."authwindow.auth_label = W.TextBox((10, 8, -10, 96), auth_text)authwindow.code = W.EditText((10, 112, -10, 30))authwindow.logout_btn = W.Button((10, -22, 60, 16), "Logout", authwindow.close)authwindow.ok_btn = W.Button((-69, -22, 60, 16), "OK", createToken)authwindow.setdefaultbutton(authwindow.ok_btn)# Toot Windowtootwindow = W.Dialog((220, 100), "Macstodon %s - Toot" % VERSION)tootwindow.toot = W.EditText((10, 6, -10, 50))tootwindow.logout_btn = W.Button((10, -22, 60, 16), "Logout", logout)tootwindow.toot_btn = W.Button((-69, -22, 60, 16), "Toot!", post)tootwindow.setdefaultbutton(tootwindow.toot_btn)# Open the login window when the app launchesloginwindow.open()