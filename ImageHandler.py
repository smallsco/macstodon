"""Macstodon - a Mastodon client for classic Mac OSMIT LicenseCopyright (c) 2022 Scott Small and ContributorsPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associateddocumentation files (the "Software"), to deal in the Software without restriction, including without limitation therights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permitpersons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of theSoftware.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THEWARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS ORCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OROTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."""# ############### Python Imports # ##############import imgimport imgformatimport MacOSimport osimport Qdimport stringimport structimport urllibimport urlparse# ########### My Imports# ##########from MacstodonHelpers import dprint, handleRequest# ############ Application# ###########class ImageHandler:    def __init__(self, app):        """        Initializes the ImageHandler class.        """        self.app = app    def getImageFromURL(self, url, cache=None):        if cache == "account":            file_name = self.getFilenameFromURL(url)            cached_file_name = self.getCachedFileName(file_name, cache)            if cached_file_name:                name_no_ext, ext = os.path.splitext(cached_file_name)                name, width, height = string.split(name_no_ext, "_")                width = int(width)                height = int(height)                image = self.getImageFromCache(                    os.path.join(self.app.cacheacctfolderpath, cached_file_name)                )            else:                src_image_path = self.downloadImage(url)                image, width, height = self.parseImage(src_image_path)                urllib.urlcleanup()                self.cacheImage(image, width, height, cache, file_name)        elif cache == "media":            dprint("media")            pass        else:            src_image_path = self.downloadImage(url)            image, width, height = self.parseImage(src_image_path)            urllib.urlcleanup()        return image, width, height    def getFilenameFromURL(self, url):        """        Returns the file name, without extension, from a URL.        i.e. http://www.google.ca/foo/bar/baz/asdf.jpg returns "asdf"        """        parsed_url = urlparse.urlparse(url)        path = parsed_url[2]        file_name_ext = os.path.basename(string.replace(path, "/", ":"))        file_name, ext = os.path.splitext(file_name_ext)        return file_name    def getCachedFileName(self, file_name, cache):        if cache == "account":            # file_name passed to this function will be "asdf"            # file_name_disk will look like "asdf_123_456.raw"            all_cached_accounts = os.listdir(self.app.cacheacctfolderpath)            file_name_disk = None            for cached_account in all_cached_accounts:                if string.find(cached_account, file_name) > -1:                    file_name_disk = cached_account                    break            return file_name_disk        elif cache == "media":            pass        def getImageFromCache(self, file_path):        fh = open(file_path, "rb")        image = fh.read()        fh.close()        return image    def downloadImage(self, url):        http_url = string.replace(url, "https://", "http://")        file_path, headers = urllib.urlretrieve(http_url)        return file_path    def parseImage(self, src_image_path):        # Read file        rdr = img.reader(imgformat.macrgb16, src_image_path)        imgwidth, imgheight = rdr.width, rdr.height        data = rdr.read()        del rdr        return data, imgwidth, imgheight    def cacheImage(self, image, width, height, cache, name=None):        if cache == "account":            path = os.path.join(self.app.cacheacctfolderpath, "%s_%s_%s.raw" % (name, width, height))            fh = open(path, "wb")            fh.write(image)            fh.close()